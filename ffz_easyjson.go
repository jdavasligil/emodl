// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package emodl

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1d9e6730DecodeGithubComJdavasligilEmodl(in *jlexer.Lexer, out *FFZEmoteSetResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default_sets":
			if in.IsNull() {
				in.Skip()
				out.DefaultSets = nil
			} else {
				in.Delim('[')
				if out.DefaultSets == nil {
					if !in.IsDelim(']') {
						out.DefaultSets = make([]int, 0, 8)
					} else {
						out.DefaultSets = []int{}
					}
				} else {
					out.DefaultSets = (out.DefaultSets)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.DefaultSets = append(out.DefaultSets, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sets":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Sets = make(map[string]FFZEmoteSet)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 FFZEmoteSet
					easyjson1d9e6730DecodeGithubComJdavasligilEmodl1(in, &v2)
					(out.Sets)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1d9e6730EncodeGithubComJdavasligilEmodl(out *jwriter.Writer, in FFZEmoteSetResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"default_sets\":"
		out.RawString(prefix[1:])
		if in.DefaultSets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.DefaultSets {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sets\":"
		out.RawString(prefix)
		if in.Sets == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Sets {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				easyjson1d9e6730EncodeGithubComJdavasligilEmodl1(out, v5Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FFZEmoteSetResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1d9e6730EncodeGithubComJdavasligilEmodl(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FFZEmoteSetResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1d9e6730EncodeGithubComJdavasligilEmodl(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FFZEmoteSetResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1d9e6730DecodeGithubComJdavasligilEmodl(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FFZEmoteSetResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1d9e6730DecodeGithubComJdavasligilEmodl(l, v)
}
func easyjson1d9e6730DecodeGithubComJdavasligilEmodl1(in *jlexer.Lexer, out *FFZEmoteSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "emoticons":
			if in.IsNull() {
				in.Skip()
				out.Emotes = nil
			} else {
				in.Delim('[')
				if out.Emotes == nil {
					if !in.IsDelim(']') {
						out.Emotes = make([]FFZEmote, 0, 1)
					} else {
						out.Emotes = []FFZEmote{}
					}
				} else {
					out.Emotes = (out.Emotes)[:0]
				}
				for !in.IsDelim(']') {
					var v6 FFZEmote
					easyjson1d9e6730DecodeGithubComJdavasligilEmodl2(in, &v6)
					out.Emotes = append(out.Emotes, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1d9e6730EncodeGithubComJdavasligilEmodl1(out *jwriter.Writer, in FFZEmoteSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"emoticons\":"
		out.RawString(prefix)
		if in.Emotes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Emotes {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson1d9e6730EncodeGithubComJdavasligilEmodl2(out, v8)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson1d9e6730DecodeGithubComJdavasligilEmodl2(in *jlexer.Lexer, out *FFZEmote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "urls":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.URLs = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.URLs)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1d9e6730EncodeGithubComJdavasligilEmodl2(out *jwriter.Writer, in FFZEmote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.URLs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.URLs {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
